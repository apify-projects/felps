import { DataStoreInstance, DataStoreOptions } from './types';
export declare const create: (options: DataStoreOptions) => DataStoreInstance;
export declare const getPath: (dataStore: DataStoreInstance, path: string) => string;
export declare const get: <T = any>(dataStore: DataStoreInstance, path?: string | undefined) => T;
export declare const set: <T = any>(dataStore: DataStoreInstance, path: string, data: T) => void;
export declare const remove: (dataStore: DataStoreInstance, path: string) => void;
export declare const has: (dataStore: DataStoreInstance, path: string) => boolean;
export declare const entries: <T = any>(dataStore: DataStoreInstance, path?: string | undefined) => [string, T][];
export declare const values: <T = any>(dataStore: DataStoreInstance, path?: string | undefined) => T[];
export declare const keys: <T = any>(dataStore: DataStoreInstance, path?: string | undefined) => string[];
export declare const increment: (dataStore: DataStoreInstance, path: string, stepNumber?: number) => number;
export declare const decrement: (dataStore: DataStoreInstance, path: string, stepNumber?: number) => number;
export declare const pop: <T = any>(dataStore: DataStoreInstance, path: string) => T;
export declare const shift: <T = any>(dataStore: DataStoreInstance, path: string) => T;
export declare const push: <T = any>(dataStore: DataStoreInstance, path: string, ...data: T[]) => void;
export declare const setAndGetKey: <T = any>(dataStore: DataStoreInstance, data: T) => string;
export declare const update: <T = any>(dataStore: DataStoreInstance, path: string, data: T) => void;
export declare const load: (dataStore: DataStoreInstance) => Promise<DataStoreInstance>;
export declare const persist: (dataStore: DataStoreInstance) => Promise<void>;
export declare const listen: (dataStore: DataStoreInstance) => void;
declare const _default: {
    create: (options: DataStoreOptions) => DataStoreInstance;
    get: <T = any>(dataStore: DataStoreInstance, path?: string | undefined) => T;
    set: <T_1 = any>(dataStore: DataStoreInstance, path: string, data: T_1) => void;
    remove: (dataStore: DataStoreInstance, path: string) => void;
    has: (dataStore: DataStoreInstance, path: string) => boolean;
    entries: <T_2 = any>(dataStore: DataStoreInstance, path?: string | undefined) => [string, T_2][];
    values: <T_3 = any>(dataStore: DataStoreInstance, path?: string | undefined) => T_3[];
    keys: <T_4 = any>(dataStore: DataStoreInstance, path?: string | undefined) => string[];
    increment: (dataStore: DataStoreInstance, path: string, stepNumber?: number) => number;
    decrement: (dataStore: DataStoreInstance, path: string, stepNumber?: number) => number;
    pop: <T_5 = any>(dataStore: DataStoreInstance, path: string) => T_5;
    shift: <T_6 = any>(dataStore: DataStoreInstance, path: string) => T_6;
    push: <T_7 = any>(dataStore: DataStoreInstance, path: string, ...data: T_7[]) => void;
    setAndGetKey: <T_8 = any>(dataStore: DataStoreInstance, data: T_8) => string;
    update: <T_9 = any>(dataStore: DataStoreInstance, path: string, data: T_9) => void;
    load: (dataStore: DataStoreInstance) => Promise<DataStoreInstance>;
    persist: (dataStore: DataStoreInstance) => Promise<void>;
    listen: (dataStore: DataStoreInstance) => void;
};
export default _default;
//# sourceMappingURL=data-store.d.ts.map