import { ReallyAny } from './types';
export declare const craftUID: (size?: number | undefined) => string;
export declare const craftUIDKey: (prefix?: string | undefined, uidLength?: number) => string;
export declare const getUIDKeyTime: (key: string) => number;
export declare const compareUIDKeysFromFirst: (a: string, b: string) => number;
export declare const compareUIDKeysFromLast: (a: string, b: string) => number;
export declare const arrayToKeyedObject: (arr: any[]) => any;
export declare const keyedObjectToArray: (keyedObject: Record<string, any>) => any;
export declare const extendRequest: (request: any, userData: any) => any;
export declare const randomNumberBetween: (min: number, max: number) => number;
export declare const resolveUrl: (absoluteUrl: string, relativeUrl: string) => string | void;
export declare const pathify: (...args: string[]) => string;
export declare const intersect: (arrayA: string[], arrayB: string[]) => string[];
export declare const difference: (arrayA: string[], arrayB: string[]) => string[];
export declare const isNumberPredicate: (nb: number) => boolean;
export declare const concatAsUniqueArray: (...arrs: any[]) => never[];
export declare const orderByClosestLength: (text: string, list: any[], matcher?: (item: any) => string) => string[];
export declare const traverse: (obj: any, handler: (key: string, value: any) => void) => void;
export declare const traverseAndCarry: (obj: ReallyAny, context: ReallyAny, handler: (value: any, key: string | undefined, ctx: ReallyAny) => ReallyAny, key?: string | undefined) => void;
export declare const someAsync: (arr: any[], predicate: (item: any) => Promise<boolean>) => Promise<boolean>;
export declare const everyAsync: (arr: any[], predicate: (item: any) => Promise<boolean>) => Promise<boolean>;
export declare const merge: (...objs: any[]) => any;
//# sourceMappingURL=utils.d.ts.map